from math import sqrt, fabs
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a7005738",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt \n",
    "import pandas as pd\n",
    "from scipy.stats import pearsonr\n",
    "from astropy.io import fits\n",
    "from astropy.table import Table\n",
    "from tqdm import tqdm\n",
    "from sklearn.preprocessing import normalize\n",
    "from matplotlib.patches import Circle"
functions = []


for i in range(3):
    def f():
        return i;
    functions.append(f);
	   
def pDis(a, b, c):
    u = b[0] - a[0] , b[1] - a[1];          			//vec of ab
    dd = sqrt( u[0] ** 2 + t[1] ** 2 );      			//len of ab
    t = t[0] / dd , t[1] / dd;               			//unit vec
    n = -t[1] , t[0];                    			//to ab
    ac = c[0] - a[0] , c[1] - a[1];          			//vec ab
    return fabs( ac[0] * n[0] + ac[1] * n[1] ); 		//min projection

print( [f ((1,1), (2,2), (2,0)) for pDis in functions]);



    
